/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Commuter } from "./Commuter";
import { CommuterCountArgs } from "./CommuterCountArgs";
import { CommuterFindManyArgs } from "./CommuterFindManyArgs";
import { CommuterFindUniqueArgs } from "./CommuterFindUniqueArgs";
import { CreateCommuterArgs } from "./CreateCommuterArgs";
import { UpdateCommuterArgs } from "./UpdateCommuterArgs";
import { DeleteCommuterArgs } from "./DeleteCommuterArgs";
import { CardFindManyArgs } from "../../card/base/CardFindManyArgs";
import { Card } from "../../card/base/Card";
import { CommuterService } from "../commuter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Commuter)
export class CommuterResolverBase {
  constructor(
    protected readonly service: CommuterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Commuter",
    action: "read",
    possession: "any",
  })
  async _commutersMeta(
    @graphql.Args() args: CommuterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Commuter])
  @nestAccessControl.UseRoles({
    resource: "Commuter",
    action: "read",
    possession: "any",
  })
  async commuters(
    @graphql.Args() args: CommuterFindManyArgs
  ): Promise<Commuter[]> {
    return this.service.commuters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Commuter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Commuter",
    action: "read",
    possession: "own",
  })
  async commuter(
    @graphql.Args() args: CommuterFindUniqueArgs
  ): Promise<Commuter | null> {
    const result = await this.service.commuter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commuter)
  @nestAccessControl.UseRoles({
    resource: "Commuter",
    action: "create",
    possession: "any",
  })
  async createCommuter(
    @graphql.Args() args: CreateCommuterArgs
  ): Promise<Commuter> {
    return await this.service.createCommuter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Commuter)
  @nestAccessControl.UseRoles({
    resource: "Commuter",
    action: "update",
    possession: "any",
  })
  async updateCommuter(
    @graphql.Args() args: UpdateCommuterArgs
  ): Promise<Commuter | null> {
    try {
      return await this.service.updateCommuter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Commuter)
  @nestAccessControl.UseRoles({
    resource: "Commuter",
    action: "delete",
    possession: "any",
  })
  async deleteCommuter(
    @graphql.Args() args: DeleteCommuterArgs
  ): Promise<Commuter | null> {
    try {
      return await this.service.deleteCommuter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Card], { name: "cards" })
  @nestAccessControl.UseRoles({
    resource: "Card",
    action: "read",
    possession: "any",
  })
  async findCards(
    @graphql.Parent() parent: Commuter,
    @graphql.Args() args: CardFindManyArgs
  ): Promise<Card[]> {
    const results = await this.service.findCards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
