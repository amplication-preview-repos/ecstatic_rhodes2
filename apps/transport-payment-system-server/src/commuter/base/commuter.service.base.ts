/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Commuter as PrismaCommuter,
  Card as PrismaCard,
} from "@prisma/client";

export class CommuterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CommuterCountArgs, "select">): Promise<number> {
    return this.prisma.commuter.count(args);
  }

  async commuters(
    args: Prisma.CommuterFindManyArgs
  ): Promise<PrismaCommuter[]> {
    return this.prisma.commuter.findMany(args);
  }
  async commuter(
    args: Prisma.CommuterFindUniqueArgs
  ): Promise<PrismaCommuter | null> {
    return this.prisma.commuter.findUnique(args);
  }
  async createCommuter(
    args: Prisma.CommuterCreateArgs
  ): Promise<PrismaCommuter> {
    return this.prisma.commuter.create(args);
  }
  async updateCommuter(
    args: Prisma.CommuterUpdateArgs
  ): Promise<PrismaCommuter> {
    return this.prisma.commuter.update(args);
  }
  async deleteCommuter(
    args: Prisma.CommuterDeleteArgs
  ): Promise<PrismaCommuter> {
    return this.prisma.commuter.delete(args);
  }

  async findCards(
    parentId: string,
    args: Prisma.CardFindManyArgs
  ): Promise<PrismaCard[]> {
    return this.prisma.commuter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cards(args);
  }
}
